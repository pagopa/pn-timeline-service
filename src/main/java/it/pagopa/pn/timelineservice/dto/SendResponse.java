/*
 * PaperChannel
 * ## Abstract   Questo servizio permette di inviare richieste di invio cartaceo in modo asyncrono e ricevere aggiornamenti   sul loro stato di avanzamento. Nello specifico: <br/>       - Raccomandata Internazionale, <br/>       - Raccomandata Semplice, <br/>       - Raccomandata con ricevuta di ritorno, <br/>       - Raccomandata a norma di legge 890/1982. <br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.pagopa.pn.timelineservice.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * SendResponse
 */
@JsonPropertyOrder({
  SendResponse.JSON_PROPERTY_AMOUNT,
  SendResponse.JSON_PROPERTY_NUMBER_OF_PAGES,
  SendResponse.JSON_PROPERTY_ENVELOPE_WEIGHT
})
@JsonTypeName("SendResponse")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-23T15:16:59.938887100+02:00[Europe/Rome]")
@lombok.ToString
public class SendResponse {
  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Integer amount;

  public static final String JSON_PROPERTY_NUMBER_OF_PAGES = "numberOfPages";
  private Integer numberOfPages;

  public static final String JSON_PROPERTY_ENVELOPE_WEIGHT = "envelopeWeight";
  private Integer envelopeWeight;

  public SendResponse() { 
  }

  public SendResponse amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * ammontare in eurocent del costo per l&#39;invio della notifica in forma cartacea
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ammontare in eurocent del costo per l'invio della notifica in forma cartacea")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public SendResponse numberOfPages(Integer numberOfPages) {
    
    this.numberOfPages = numberOfPages;
    return this;
  }

   /**
   * numero delle pagina che compongono la spedizione cartacea
   * @return numberOfPages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "numero delle pagina che compongono la spedizione cartacea")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumberOfPages() {
    return numberOfPages;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumberOfPages(Integer numberOfPages) {
    this.numberOfPages = numberOfPages;
  }


  public SendResponse envelopeWeight(Integer envelopeWeight) {
    
    this.envelopeWeight = envelopeWeight;
    return this;
  }

   /**
   * peso in grammi della busta
   * @return envelopeWeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "peso in grammi della busta")
  @JsonProperty(JSON_PROPERTY_ENVELOPE_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEnvelopeWeight() {
    return envelopeWeight;
  }


  @JsonProperty(JSON_PROPERTY_ENVELOPE_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnvelopeWeight(Integer envelopeWeight) {
    this.envelopeWeight = envelopeWeight;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendResponse sendResponse = (SendResponse) o;
    return Objects.equals(this.amount, sendResponse.amount) &&
        Objects.equals(this.numberOfPages, sendResponse.numberOfPages) &&
        Objects.equals(this.envelopeWeight, sendResponse.envelopeWeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, numberOfPages, envelopeWeight);
  }

}

